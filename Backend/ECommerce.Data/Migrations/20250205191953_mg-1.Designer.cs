// <auto-generated />
using System;
using ECommerce.Data.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Data.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20250205191953_mg-1")]
    partial class mg1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Entity.Concrete.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "115c7796-cfac-44de-91b5-916eaae125b5",
                            CreatedDate = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6877),
                            Description = "Administrator role",
                            IsActive = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "811f466c-9d06-43f8-a054-24aedbb4161b",
                            CreatedDate = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6983),
                            Description = "Regular user role",
                            IsActive = true,
                            Name = "NormalUser",
                            NormalizedName = "NORMALUSER"
                        },
                        new
                        {
                            Id = "811f466c-9d06-43f8-a054-24aedbb4161c",
                            CreatedDate = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6989),
                            Description = "Seller role",
                            IsActive = true,
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Baskets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "c0b7fef7-df2b-4857-9b3d-bc8967ad19ac",
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3447),
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3466),
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3475),
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", t =>
                        {
                            t.HasCheckConstraint("CK_BasketItem_Quantity", "Quantity > 0");
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6709),
                            Description = "Woman",
                            ImageUrl = "x",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Woman"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6728),
                            Description = "Man",
                            ImageUrl = "x",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Man"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6729),
                            Description = "Baby",
                            ImageUrl = "x",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Baby"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6731),
                            Description = "Home",
                            ImageUrl = "x",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6732),
                            Description = "Top clothing",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Woman Top clothing",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6733),
                            Description = "Top clothing",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Man Top clothing",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6734),
                            Description = "Top clothing",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Baby Top clothing",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(6736),
                            Description = "Blanket",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Home Blanket",
                            ParentCategoryId = 4
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PreparationTimeInDays")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            CategoryId = 5,
                            Color = 2,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3518),
                            Description = "Elegant silk blouse for women.",
                            ImageUrl = "https://example.com/images/silk-blouse.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Silk Blouse",
                            PreparationTimeInDays = 3,
                            Size = 3,
                            UnitPrice = 49.99m
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            CategoryId = 6,
                            Color = 4,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3526),
                            Description = "Comfortable and stylish casual shirt for men.",
                            ImageUrl = "https://example.com/images/mens-casual-shirt.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Men's Casual Shirt",
                            PreparationTimeInDays = 2,
                            Size = 4,
                            UnitPrice = 34.99m
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            CategoryId = 7,
                            Color = 7,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3532),
                            Description = "Soft pajamas for babies.",
                            ImageUrl = "https://example.com/images/baby-pajamas.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Baby Pajamas",
                            PreparationTimeInDays = 2,
                            Size = 7,
                            UnitPrice = 14.99m
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            CategoryId = 7,
                            Color = 6,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3544),
                            Description = "Comfortable shoes for babies.",
                            ImageUrl = "https://example.com/images/baby-shoes.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Baby Shoes",
                            PreparationTimeInDays = 4,
                            Size = 11,
                            UnitPrice = 25.99m
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            CategoryId = 8,
                            Color = 4,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3546),
                            Description = "Soft and warm blanket for home.",
                            ImageUrl = "https://example.com/images/home-blanket.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Home Blanket",
                            PreparationTimeInDays = 3,
                            Size = 4,
                            UnitPrice = 39.99m
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            CategoryId = 8,
                            Color = 4,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3548),
                            Description = "Soft and warm blanket for home.",
                            ImageUrl = "https://example.com/images/home1-blanket.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Home pillow",
                            PreparationTimeInDays = 3,
                            Size = 4,
                            UnitPrice = 40.99m
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            CategoryId = 8,
                            Color = 11,
                            CreatedAt = new DateTime(2025, 2, 5, 22, 19, 52, 512, DateTimeKind.Local).AddTicks(3549),
                            Description = "Comfortable furniture set for home.",
                            ImageUrl = "https://example.com/images/home-furniture-set.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Home Furniture Set",
                            PreparationTimeInDays = 7,
                            Size = 4,
                            UnitPrice = 499.99m
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.UserFav", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserFavs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c0b7fef7-df2b-4857-9b3d-bc8967ad19ac",
                            RoleId = "115c7796-cfac-44de-91b5-916eaae125b5"
                        },
                        new
                        {
                            UserId = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            RoleId = "811f466c-9d06-43f8-a054-24aedbb4161b"
                        },
                        new
                        {
                            UserId = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            RoleId = "811f466c-9d06-43f8-a054-24aedbb4161c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Admin", b =>
                {
                    b.HasBaseType("ECommerce.Entity.Concrete.ApplicationUser");

                    b.ToTable("Admin", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c0b7fef7-df2b-4857-9b3d-bc8967ad19ac",
                            AccessFailedCount = 0,
                            Address = "",
                            City = "",
                            ConcurrencyStamp = "ca231131-fa04-4d8e-aeac-0995544ab3b6",
                            DateOfBirth = new DateTime(2025, 2, 5, 22, 19, 52, 199, DateTimeKind.Local).AddTicks(7035),
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPVI2dvJEXagOVXkry/Iph/atwJ6sYQElgjqO6P+HfcLinuC9uqvD42WJTeMA1eBdw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38b281d3-796e-4926-beda-011755c3b3ba",
                            TwoFactorEnabled = false,
                            UserName = "adminuser@gmail.com"
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.NormalUser", b =>
                {
                    b.HasBaseType("ECommerce.Entity.Concrete.ApplicationUser");

                    b.ToTable("NormalUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            AccessFailedCount = 0,
                            Address = "aa",
                            City = "",
                            ConcurrencyStamp = "a3645b64-7a54-4159-9913-15eee2453edc",
                            DateOfBirth = new DateTime(2025, 2, 5, 22, 19, 52, 264, DateTimeKind.Local).AddTicks(4802),
                            Email = "normaluser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Normal",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMALUSER@GMAIL.COM",
                            NormalizedUserName = "NORMALUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAucAZ9dcGZqIUFIQOE9S0IeJPdQ8F04PcdyAdgxu2e8+64403/KWN6gx9GoX35LOA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e12b5625-c513-46ed-8341-2bb5fb071bcd",
                            TwoFactorEnabled = false,
                            UserName = "normaluser@gmail.com"
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Seller", b =>
                {
                    b.HasBaseType("ECommerce.Entity.Concrete.ApplicationUser");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeeklyOrderLimit")
                        .HasColumnType("int");

                    b.ToTable("Sellers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cfc0c1b1-e663-4c5e-b747-255c6c40b4c6",
                            AccessFailedCount = 0,
                            Address = "",
                            City = "",
                            ConcurrencyStamp = "f08706d8-f5d6-4de9-be1c-6fcb605b2ac9",
                            DateOfBirth = new DateTime(2025, 2, 5, 22, 19, 52, 346, DateTimeKind.Local).AddTicks(7500),
                            Email = "selleruser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Seller",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLERUSER@GMAIL.COM",
                            NormalizedUserName = "SELLERUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKHNJ2pSInPZ/7lXvUUgYfOtYlnU7lFFFYOSEOPkUlA2NRYMrPpw0RcIoxPFeDm9g==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97d6ed6e-e538-4d16-8182-78af91f32e12",
                            TwoFactorEnabled = false,
                            UserName = "selleruser@gmail.com",
                            IdentityNumber = "1",
                            IsActive = true,
                            IsApproved = true,
                            StoreName = "Store",
                            WeeklyOrderLimit = 0
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Basket", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", "ApplicationUser")
                        .WithOne("Basket")
                        .HasForeignKey("ECommerce.Entity.Concrete.Basket", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.BasketItem", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Category", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.ContactMessage", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", "ApplicationUser")
                        .WithMany("ContactMessages")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Discount", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", "ApplicationUser")
                        .WithMany("Discounts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Invoice", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("ECommerce.Entity.Concrete.Invoice", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Order", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Product", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", "ApplicationUser")
                        .WithMany("Products")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Review", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.OrderItem", "OrderItem")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.UserFav", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", "ApplicationUser")
                        .WithMany("UserFavs")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.Product", "Product")
                        .WithMany("UserFavs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Admin", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ECommerce.Entity.Concrete.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.NormalUser", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ECommerce.Entity.Concrete.NormalUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Seller", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ECommerce.Entity.Concrete.Seller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.ApplicationUser", b =>
                {
                    b.Navigation("Basket")
                        .IsRequired();

                    b.Navigation("ContactMessages");

                    b.Navigation("Discounts");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("UserFavs");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Basket", b =>
                {
                    b.Navigation("BasketItems");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Order", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.OrderItem", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Discounts");

                    b.Navigation("OrderItems");

                    b.Navigation("UserFavs");
                });
#pragma warning restore 612, 618
        }
    }
}
